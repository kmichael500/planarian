// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;
using Planarian.Model.Database;

#nullable disable

namespace Planarian.Migrations.Migrations
{
    [DbContext(typeof(PlanarianDbContext))]
    [Migration("20250418181042_v27")]
    partial class v27
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Planarian.Model.Database.Entities.LeadTag", b =>
                {
                    b.Property<string>("TagTypeId")
                        .HasColumnType("character varying(10)");

                    b.Property<string>("LeadId")
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TagTypeId", "LeadId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LeadId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("LeadTags");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.Leads.Lead", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Classification")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ClosestStation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateClosed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TripId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("TripId");

                    b.ToTable("Leads");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.Member", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProjectId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("TripId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TripId");

                    b.HasIndex("UserId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.MessageLog", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FromEmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FromName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MessageKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Substitutions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ToEmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ToName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("MessageLogs");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.MessageType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FromEmail")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("FromName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Html")
                        .HasColumnType("text");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Mjml")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Subject")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("MessageTypes");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.Photo", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("BlobKey")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TripId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.Projects.Project", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CountyIdDelimiter")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DefaultViewAccessAllCaves")
                        .HasColumnType("boolean");

                    b.Property<bool>("ExportEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.AccountState", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("StateId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AccountId", "StateId");

                    b.HasIndex("StateId");

                    b.ToTable("AccountStates");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.AccountUser", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("UserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("InvitationAcceptedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InvitationCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("InvitationSentOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AccountId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AccountUsers");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.ArcheologyTag", b =>
                {
                    b.Property<string>("TagTypeId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CaveId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TagTypeId", "CaveId");

                    b.HasIndex("CaveId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("ArcheologyTags");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.BiologyTag", b =>
                {
                    b.Property<string>("TagTypeId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CaveId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TagTypeId", "CaveId");

                    b.HasIndex("CaveId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("BiologyTags");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.CartographerNameTag", b =>
                {
                    b.Property<string>("TagTypeId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CaveId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TagTypeId", "CaveId");

                    b.HasIndex("CaveId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("CartographerNameTags");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.Cave", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("AlternateNames")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("text");

                    b.Property<string>("CountyId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("CountyNumber")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("DepthFeet")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<double?>("LengthFeet")
                        .HasColumnType("double precision");

                    b.Property<double?>("MaxPitDepthFeet")
                        .HasColumnType("double precision");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Narrative")
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("NarrativeSearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Narrative" });

                    b.Property<int?>("NumberOfPits")
                        .HasColumnType("integer");

                    b.Property<string>("ReportedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ReportedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StateId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CountyId");

                    b.HasIndex("CountyNumber");

                    b.HasIndex("DepthFeet");

                    b.HasIndex("LengthFeet");

                    b.HasIndex("Name");

                    b.HasIndex("NarrativeSearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("NarrativeSearchVector"), "GIN");

                    b.HasIndex("ReportedByUserId");

                    b.HasIndex("StateId");

                    b.HasIndex("CountyNumber", "CountyId")
                        .IsUnique();

                    b.ToTable("Caves");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.CaveChangeLog", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ApprovedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CaveId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ChangeValueType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ChangedByUserId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool?>("ValueBool")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ValueDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("ValueDouble")
                        .HasColumnType("double precision");

                    b.Property<int?>("ValueInt")
                        .HasColumnType("integer");

                    b.Property<string>("ValueString")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("CaveId");

                    b.HasIndex("ChangedByUserId");

                    b.ToTable("CaveChangeLog");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.CaveChangeRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CaveId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ReviewedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ReviewedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CaveId");

                    b.HasIndex("ReviewedByUserId");

                    b.ToTable("CaveChangeRequest");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.CaveGeoJson", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CaveId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GeoJson")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("jsonb");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CaveId");

                    b.ToTable("CaveGeoJsons");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.CaveOtherTag", b =>
                {
                    b.Property<string>("TagTypeId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CaveId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TagTypeId", "CaveId");

                    b.HasIndex("CaveId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("CaveOtherTags");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.CavePermission", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CaveId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CountyId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PermissionId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CaveId");

                    b.HasIndex("CountyId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId", "AccountId", "PermissionId")
                        .IsUnique()
                        .HasFilter("\"CountyId\" IS NULL AND \"CaveId\" IS NULL");

                    b.HasIndex("UserId", "AccountId", "CaveId", "PermissionId")
                        .IsUnique()
                        .HasFilter("\"CaveId\" IS NOT NULL");

                    b.HasIndex("UserId", "AccountId", "CountyId", "PermissionId")
                        .IsUnique()
                        .HasFilter("\"CountyId\" IS NOT NULL");

                    b.ToTable("CavePermission", null, t =>
                        {
                            t.HasCheckConstraint("CK_CavePermission_CountyOrCave", "\"CountyId\" IS NULL OR \"CaveId\" IS NULL");
                        });
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.CaveReportedByNameTag", b =>
                {
                    b.Property<string>("TagTypeId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CaveId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TagTypeId", "CaveId");

                    b.HasIndex("CaveId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("CaveReportedByNameTags");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.County", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StateId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.HasIndex("AccountId", "StateId", "DisplayId")
                        .IsUnique();

                    b.ToTable("Counties");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.Entrance", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CaveId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<string>("LocationQualityTagId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double?>("PitDepthFeet")
                        .HasColumnType("double precision");

                    b.Property<string>("ReportedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ReportedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CaveId");

                    b.HasIndex("Location");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Location"), "GIST");

                    b.HasIndex("LocationQualityTagId");

                    b.HasIndex("ReportedByUserId");

                    b.ToTable("Entrances");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.EntranceHydrologyTag", b =>
                {
                    b.Property<string>("TagTypeId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("EntranceId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TagTypeId", "EntranceId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EntranceId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("EntranceHydrologyTags");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.EntranceOtherTag", b =>
                {
                    b.Property<string>("TagTypeId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("EntranceId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TagTypeId", "EntranceId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EntranceId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("EntranceOtherTag");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.EntranceReportedByNameTag", b =>
                {
                    b.Property<string>("TagTypeId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("EntranceId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TagTypeId", "EntranceId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EntranceId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("EntranceReportedByNameTags");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.EntranceStatusTag", b =>
                {
                    b.Property<string>("TagTypeId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("EntranceId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TagTypeId", "EntranceId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EntranceId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("EntranceStatusTags");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.Favorite", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("AccountId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CaveId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CaveId");

                    b.HasIndex("UserId", "CaveId", "AccountId")
                        .IsUnique()
                        .HasDatabaseName("IX_Favorite_UserId_CaveId_AccountId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.FeatureSetting", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("AccountId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("FeatureSettings");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.FieldIndicationTag", b =>
                {
                    b.Property<string>("TagTypeId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("EntranceId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TagTypeId", "EntranceId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EntranceId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("FieldIndicationTags");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.File", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("AccountId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("BlobContainer")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("BlobKey")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CaveId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ExpiresOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("FileTypeTagId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CaveId");

                    b.HasIndex("FileTypeTagId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.GeologicAgeTag", b =>
                {
                    b.Property<string>("TagTypeId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CaveId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TagTypeId", "CaveId");

                    b.HasIndex("CaveId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("GeologicAgeTags");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.GeologyTag", b =>
                {
                    b.Property<string>("TagTypeId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CaveId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TagTypeId", "CaveId");

                    b.HasIndex("CaveId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("GeologyTags");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.MapStatusTag", b =>
                {
                    b.Property<string>("TagTypeId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CaveId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TagTypeId", "CaveId");

                    b.HasIndex("CaveId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("MapStatusTags");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.Permission", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PermissionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("Key");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("PermissionType", "Key");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.PhysiographicProvinceTag", b =>
                {
                    b.Property<string>("TagTypeId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CaveId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TagTypeId", "CaveId");

                    b.HasIndex("CaveId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("PhysiographicProvinceTags");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.State", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.UserPermission", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("AccountId")
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PermissionId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId", "PermissionId");

                    b.HasIndex("UserId", "PermissionId", "AccountId")
                        .IsUnique();

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.Views.UserCavePermissionsView", b =>
                {
                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CaveId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CountyId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PermissionId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PermissionKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasIndex("AccountId");

                    b.HasIndex("CaveId");

                    b.HasIndex("CountyId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable((string)null);

                    b.ToView("UserCavePermissions", (string)null);
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.TagType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("AccountId")
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ProjectId")
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Key");

                    b.HasIndex("ProjectId");

                    b.ToTable("TagTypes");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.TripTag", b =>
                {
                    b.Property<string>("TagTypeId")
                        .HasColumnType("character varying(10)");

                    b.Property<string>("TripId")
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TagTypeId", "TripId");

                    b.HasIndex("TripId");

                    b.ToTable("TripTags");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.Trips.Trip", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("TagTypeId")
                        .HasColumnType("character varying(10)");

                    b.Property<string>("TripReport")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TagTypeId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("EmailConfirmationCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("EmailConfirmedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("HashedPassword")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsTemporary")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordResetCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("PasswordResetCodeExpiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ProfilePhotoBlobKey")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress")
                        .IsUnique()
                        .HasFilter("\"IsTemporary\" = false");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.LeadTag", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.Leads.Lead", "Lead")
                        .WithMany("LeadTags")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.TagType", "TagType")
                        .WithMany("LeadTags")
                        .HasForeignKey("TagTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Lead");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("TagType");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.Leads.Lead", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.Trips.Trip", "Trip")
                        .WithMany("Leads")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.Member", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.Projects.Project", "Project")
                        .WithMany("Members")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Planarian.Model.Database.Entities.Trips.Trip", "Trip")
                        .WithMany("Members")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Planarian.Model.Database.Entities.User", "User")
                        .WithMany("Members")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.MessageLog", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.MessageType", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.Photo", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.Trips.Trip", "Trip")
                        .WithMany("Photos")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.Projects.Project", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.AccountState", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Account", "Account")
                        .WithMany("AccountStates")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.State", "State")
                        .WithMany("AccountStates")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.AccountUser", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Account", "Account")
                        .WithMany("AccountUsers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.User", "User")
                        .WithMany("AccountUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.ArcheologyTag", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Cave", "Cave")
                        .WithMany("ArcheologyTags")
                        .HasForeignKey("CaveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.TagType", "TagType")
                        .WithMany("ArcheologyTags")
                        .HasForeignKey("TagTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cave");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("TagType");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.BiologyTag", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Cave", "Cave")
                        .WithMany("BiologyTags")
                        .HasForeignKey("CaveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.TagType", "TagType")
                        .WithMany("BiologyTags")
                        .HasForeignKey("TagTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cave");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("TagType");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.CartographerNameTag", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Cave", "Cave")
                        .WithMany("CartographerNameTags")
                        .HasForeignKey("CaveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.TagType", "TagType")
                        .WithMany("CartographerNameTags")
                        .HasForeignKey("TagTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cave");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("TagType");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.Cave", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Account", "Account")
                        .WithMany("Caves")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.County", "County")
                        .WithMany("Caves")
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.User", "ReportedByUser")
                        .WithMany("CavesReported")
                        .HasForeignKey("ReportedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.State", "State")
                        .WithMany("Caves")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("County");

                    b.Navigation("ReportedByUser");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.CaveChangeLog", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.User", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Cave", "Cave")
                        .WithMany("CaveChangeLogs")
                        .HasForeignKey("CaveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.User", "ChangedByUser")
                        .WithMany("CaveChangeLogs")
                        .HasForeignKey("ChangedByUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("ApprovedByUser");

                    b.Navigation("Cave");

                    b.Navigation("ChangedByUser");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.CaveChangeRequest", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Account", "Account")
                        .WithMany("CaveChangeRequests")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Cave", "Cave")
                        .WithMany("CaveChangeRequests")
                        .HasForeignKey("CaveId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Planarian.Model.Database.Entities.User", "ReviewedByUser")
                        .WithMany("CaveChangeRequestsReviewed")
                        .HasForeignKey("ReviewedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsOne("Planarian.Model.Database.Entities.RidgeWalker.ViewModels.AddCave", "Json", b1 =>
                        {
                            b1.Property<string>("CaveChangeRequestId")
                                .HasColumnType("character varying(10)");

                            b1.PrimitiveCollection<List<string>>("AlternateNames")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.PrimitiveCollection<List<string>>("ArcheologyTagIds")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.PrimitiveCollection<List<string>>("BiologyTagIds")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.PrimitiveCollection<List<string>>("CartographerNameTagIds")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.Property<string>("CountyId")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)");

                            b1.Property<double>("DepthFeet")
                                .HasColumnType("double precision");

                            b1.PrimitiveCollection<List<string>>("GeologicAgeTagIds")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.PrimitiveCollection<List<string>>("GeologyTagIds")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.Property<string>("Id")
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)");

                            b1.Property<double>("LengthFeet")
                                .HasColumnType("double precision");

                            b1.PrimitiveCollection<List<string>>("MapStatusTagIds")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.Property<double>("MaxPitDepthFeet")
                                .HasColumnType("double precision");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Narrative")
                                .HasColumnType("text");

                            b1.Property<int>("NumberOfPits")
                                .HasColumnType("integer");

                            b1.PrimitiveCollection<List<string>>("OtherTagIds")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.PrimitiveCollection<List<string>>("PhysiographicProvinceTagIds")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.Property<string>("ReportedByName")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.PrimitiveCollection<List<string>>("ReportedByNameTagIds")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.Property<DateTime?>("ReportedOn")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("StateId")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)");

                            b1.HasKey("CaveChangeRequestId");

                            b1.ToTable("CaveChangeRequest");

                            b1.ToJson("Json");

                            b1.WithOwner()
                                .HasForeignKey("CaveChangeRequestId");

                            b1.OwnsMany("Planarian.Model.Database.Entities.RidgeWalker.ViewModels.AddEntrance", "Entrances", b2 =>
                                {
                                    b2.Property<string>("AddCaveCaveChangeRequestId")
                                        .HasColumnType("character varying(10)");

                                    b2.Property<int>("__synthesizedOrdinal")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Description")
                                        .HasColumnType("text");

                                    b2.Property<double>("ElevationFeet")
                                        .HasColumnType("double precision");

                                    b2.PrimitiveCollection<List<string>>("EntranceHydrologyTagIds")
                                        .IsRequired()
                                        .HasColumnType("text[]");

                                    b2.PrimitiveCollection<List<string>>("EntranceOtherTagIds")
                                        .IsRequired()
                                        .HasColumnType("text[]");

                                    b2.PrimitiveCollection<List<string>>("EntranceStatusTagIds")
                                        .IsRequired()
                                        .HasColumnType("text[]");

                                    b2.PrimitiveCollection<List<string>>("FieldIndicationTagIds")
                                        .IsRequired()
                                        .HasColumnType("text[]");

                                    b2.Property<string>("Id")
                                        .HasMaxLength(10)
                                        .HasColumnType("character varying(10)");

                                    b2.Property<bool>("IsPrimary")
                                        .HasColumnType("boolean");

                                    b2.Property<double>("Latitude")
                                        .HasColumnType("double precision");

                                    b2.Property<string>("LocationQualityTagId")
                                        .IsRequired()
                                        .HasMaxLength(10)
                                        .HasColumnType("character varying(10)");

                                    b2.Property<double>("Longitude")
                                        .HasColumnType("double precision");

                                    b2.Property<string>("Name")
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.Property<double?>("PitFeet")
                                        .HasColumnType("double precision");

                                    b2.Property<string>("ReportedByName")
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.PrimitiveCollection<List<string>>("ReportedByNameTagIds")
                                        .IsRequired()
                                        .HasColumnType("text[]");

                                    b2.Property<DateTime?>("ReportedOn")
                                        .HasColumnType("timestamp with time zone");

                                    b2.HasKey("AddCaveCaveChangeRequestId", "__synthesizedOrdinal");

                                    b2.ToTable("CaveChangeRequest");

                                    b2.ToJson("Entrances");

                                    b2.WithOwner()
                                        .HasForeignKey("AddCaveCaveChangeRequestId");
                                });

                            b1.OwnsMany("Planarian.Model.Database.Entities.RidgeWalker.ViewModels.EditFileMetadata", "Files", b2 =>
                                {
                                    b2.Property<string>("AddCaveCaveChangeRequestId")
                                        .HasColumnType("character varying(10)");

                                    b2.Property<int>("__synthesizedOrdinal")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("DisplayName")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("FileTypeTagId")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("Id")
                                        .HasColumnType("text");

                                    b2.HasKey("AddCaveCaveChangeRequestId", "__synthesizedOrdinal");

                                    b2.ToTable("CaveChangeRequest");

                                    b2.ToJson("Files");

                                    b2.WithOwner()
                                        .HasForeignKey("AddCaveCaveChangeRequestId");
                                });

                            b1.Navigation("Entrances");

                            b1.Navigation("Files");
                        });

                    b.Navigation("Account");

                    b.Navigation("Cave");

                    b.Navigation("Json")
                        .IsRequired();

                    b.Navigation("ReviewedByUser");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.CaveGeoJson", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Cave", "Cave")
                        .WithMany("GeoJsons")
                        .HasForeignKey("CaveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cave");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.CaveOtherTag", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Cave", "Cave")
                        .WithMany("CaveOtherTags")
                        .HasForeignKey("CaveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.TagType", "TagType")
                        .WithMany("CaveOtherTags")
                        .HasForeignKey("TagTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cave");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("TagType");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.CavePermission", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Account", "Account")
                        .WithMany("CavePermissions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Cave", "Cave")
                        .WithMany("CavePermissions")
                        .HasForeignKey("CaveId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.County", "County")
                        .WithMany("CavePermissions")
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Planarian.Model.Database.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Permission", "Permission")
                        .WithMany("CavePermission")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.User", "User")
                        .WithMany("CavePermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Cave");

                    b.Navigation("County");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.CaveReportedByNameTag", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Cave", "Cave")
                        .WithMany("CaveReportedByNameTags")
                        .HasForeignKey("CaveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.TagType", "TagType")
                        .WithMany("CaveReportedByNameTags")
                        .HasForeignKey("TagTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cave");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("TagType");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.County", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Account", "Account")
                        .WithMany("Counties")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.State", "State")
                        .WithMany("Counties")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.Entrance", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Cave", "Cave")
                        .WithMany("Entrances")
                        .HasForeignKey("CaveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.TagType", "LocationQualityTag")
                        .WithMany("EntranceLocationQualitiesTags")
                        .HasForeignKey("LocationQualityTagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.User", "ReportedByUser")
                        .WithMany("EntrancesReported")
                        .HasForeignKey("ReportedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Cave");

                    b.Navigation("LocationQualityTag");

                    b.Navigation("ReportedByUser");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.EntranceHydrologyTag", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Entrance", "Entrance")
                        .WithMany("EntranceHydrologyTags")
                        .HasForeignKey("EntranceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.TagType", "TagType")
                        .WithMany("EntranceHydrologyTags")
                        .HasForeignKey("TagTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Entrance");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("TagType");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.EntranceOtherTag", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Entrance", "Entrance")
                        .WithMany("EntranceOtherTags")
                        .HasForeignKey("EntranceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.TagType", "TagType")
                        .WithMany("EntranceOtherTags")
                        .HasForeignKey("TagTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Entrance");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("TagType");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.EntranceReportedByNameTag", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Entrance", "Entrance")
                        .WithMany("EntranceReportedByNameTags")
                        .HasForeignKey("EntranceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.TagType", "TagType")
                        .WithMany("EntranceReportedByNameTags")
                        .HasForeignKey("TagTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Entrance");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("TagType");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.EntranceStatusTag", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Entrance", "Entrance")
                        .WithMany("EntranceStatusTags")
                        .HasForeignKey("EntranceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.TagType", "TagType")
                        .WithMany("EntranceStatusTags")
                        .HasForeignKey("TagTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Entrance");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("TagType");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.Favorite", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Account", "Account")
                        .WithMany("Favorites")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Cave", "Cave")
                        .WithMany("Favorites")
                        .HasForeignKey("CaveId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Planarian.Model.Database.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Cave");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.FeatureSetting", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Account", "Account")
                        .WithMany("FeatureSettings")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Planarian.Model.Database.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.Navigation("Account");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.FieldIndicationTag", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Entrance", "Entrance")
                        .WithMany("FieldIndicationTags")
                        .HasForeignKey("EntranceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.TagType", "TagType")
                        .WithMany("FieldIndicationTags")
                        .HasForeignKey("TagTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Entrance");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("TagType");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.File", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Cave", "Cave")
                        .WithMany("Files")
                        .HasForeignKey("CaveId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Planarian.Model.Database.Entities.TagType", "FileTypeTag")
                        .WithMany("FileTypeTags")
                        .HasForeignKey("FileTypeTagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Cave");

                    b.Navigation("FileTypeTag");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.GeologicAgeTag", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Cave", "Cave")
                        .WithMany("GeologicAgeTags")
                        .HasForeignKey("CaveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.TagType", "TagType")
                        .WithMany("GeologicAgeTags")
                        .HasForeignKey("TagTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cave");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("TagType");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.GeologyTag", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Cave", "Cave")
                        .WithMany("GeologyTags")
                        .HasForeignKey("CaveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.TagType", "TagType")
                        .WithMany("GeologyTags")
                        .HasForeignKey("TagTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cave");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("TagType");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.MapStatusTag", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Cave", "Cave")
                        .WithMany("MapStatusTags")
                        .HasForeignKey("CaveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.TagType", "TagType")
                        .WithMany("MapStatusTags")
                        .HasForeignKey("TagTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cave");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("TagType");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.Permission", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.PhysiographicProvinceTag", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Cave", "Cave")
                        .WithMany("PhysiographicProvinceTags")
                        .HasForeignKey("CaveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.TagType", "TagType")
                        .WithMany("PhysiographicProvinceTags")
                        .HasForeignKey("TagTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cave");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("TagType");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.State", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.UserPermission", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Account", "Account")
                        .WithMany("UserPermissions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Planarian.Model.Database.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.Views.UserCavePermissionsView", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Cave", "Cave")
                        .WithMany()
                        .HasForeignKey("CaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.County", "County")
                        .WithMany()
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Cave");

                    b.Navigation("County");

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.TagType", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.RidgeWalker.Account", "Account")
                        .WithMany("Tags")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Planarian.Model.Database.Entities.Projects.Project", "Project")
                        .WithMany("CustomTagTypes")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.TripTag", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.TagType", "TagType")
                        .WithMany("TripTags")
                        .HasForeignKey("TagTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.Trips.Trip", "Trip")
                        .WithMany("TripTags")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TagType");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.Trips.Trip", b =>
                {
                    b.HasOne("Planarian.Model.Database.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("Planarian.Model.Database.Entities.Projects.Project", "Project")
                        .WithMany("Trips")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Planarian.Model.Database.Entities.TagType", null)
                        .WithMany("Trips")
                        .HasForeignKey("TagTypeId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.Leads.Lead", b =>
                {
                    b.Navigation("LeadTags");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.Projects.Project", b =>
                {
                    b.Navigation("CustomTagTypes");

                    b.Navigation("Members");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.Account", b =>
                {
                    b.Navigation("AccountStates");

                    b.Navigation("AccountUsers");

                    b.Navigation("CaveChangeRequests");

                    b.Navigation("CavePermissions");

                    b.Navigation("Caves");

                    b.Navigation("Counties");

                    b.Navigation("Favorites");

                    b.Navigation("FeatureSettings");

                    b.Navigation("Tags");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.Cave", b =>
                {
                    b.Navigation("ArcheologyTags");

                    b.Navigation("BiologyTags");

                    b.Navigation("CartographerNameTags");

                    b.Navigation("CaveChangeLogs");

                    b.Navigation("CaveChangeRequests");

                    b.Navigation("CaveOtherTags");

                    b.Navigation("CavePermissions");

                    b.Navigation("CaveReportedByNameTags");

                    b.Navigation("Entrances");

                    b.Navigation("Favorites");

                    b.Navigation("Files");

                    b.Navigation("GeoJsons");

                    b.Navigation("GeologicAgeTags");

                    b.Navigation("GeologyTags");

                    b.Navigation("MapStatusTags");

                    b.Navigation("PhysiographicProvinceTags");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.County", b =>
                {
                    b.Navigation("CavePermissions");

                    b.Navigation("Caves");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.Entrance", b =>
                {
                    b.Navigation("EntranceHydrologyTags");

                    b.Navigation("EntranceOtherTags");

                    b.Navigation("EntranceReportedByNameTags");

                    b.Navigation("EntranceStatusTags");

                    b.Navigation("FieldIndicationTags");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.Permission", b =>
                {
                    b.Navigation("CavePermission");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.RidgeWalker.State", b =>
                {
                    b.Navigation("AccountStates");

                    b.Navigation("Caves");

                    b.Navigation("Counties");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.TagType", b =>
                {
                    b.Navigation("ArcheologyTags");

                    b.Navigation("BiologyTags");

                    b.Navigation("CartographerNameTags");

                    b.Navigation("CaveOtherTags");

                    b.Navigation("CaveReportedByNameTags");

                    b.Navigation("EntranceHydrologyTags");

                    b.Navigation("EntranceLocationQualitiesTags");

                    b.Navigation("EntranceOtherTags");

                    b.Navigation("EntranceReportedByNameTags");

                    b.Navigation("EntranceStatusTags");

                    b.Navigation("FieldIndicationTags");

                    b.Navigation("FileTypeTags");

                    b.Navigation("GeologicAgeTags");

                    b.Navigation("GeologyTags");

                    b.Navigation("LeadTags");

                    b.Navigation("MapStatusTags");

                    b.Navigation("PhysiographicProvinceTags");

                    b.Navigation("TripTags");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.Trips.Trip", b =>
                {
                    b.Navigation("Leads");

                    b.Navigation("Members");

                    b.Navigation("Photos");

                    b.Navigation("TripTags");
                });

            modelBuilder.Entity("Planarian.Model.Database.Entities.User", b =>
                {
                    b.Navigation("AccountUsers");

                    b.Navigation("CaveChangeLogs");

                    b.Navigation("CaveChangeRequestsReviewed");

                    b.Navigation("CavePermissions");

                    b.Navigation("CavesReported");

                    b.Navigation("EntrancesReported");

                    b.Navigation("Favorites");

                    b.Navigation("Members");

                    b.Navigation("UserPermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
